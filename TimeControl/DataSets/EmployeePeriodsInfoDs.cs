//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;

namespace Kesco.App.Web.TimeControl.DataSets
{
    [Serializable]
    [DesignerCategory("code")]
    [DebuggerStepThrough]
    [ToolboxItem(true)]
    public class EmployeePeriodsInfoDs : DataSet
    {
        public delegate void ДоступВИнтернетRowChangeEventHandler(object sender, ДоступВИнтернетRowChangeEvent e);

        public delegate void ПроходыСотрудниковRowChangeEventHandler(object sender, ПроходыСотрудниковRowChangeEvent e);

        public delegate void СотрудникиRowChangeEventHandler(object sender, СотрудникиRowChangeEvent e);

        public EmployeePeriodsInfoDs()
        {
            InitClass();
            CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        protected EmployeePeriodsInfoDs(SerializationInfo info, StreamingContext context)
        {
            var strSchema = (string) info.GetValue("XmlSchema", typeof(string));
            if (strSchema != null)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if (ds.Tables["Сотрудники"] != null) Tables.Add(new СотрудникиDataTable(ds.Tables["Сотрудники"]));
                if (ds.Tables["ПроходыСотрудников"] != null)
                    Tables.Add(new ПроходыСотрудниковDataTable(ds.Tables["ПроходыСотрудников"]));
                if (ds.Tables["ДоступВИнтернет"] != null)
                    Tables.Add(new ДоступВИнтернетDataTable(ds.Tables["ДоступВИнтернет"]));
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                InitClass();
            }

            GetSerializationData(info, context);
            var schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public СотрудникиDataTable Сотрудники { get; private set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ПроходыСотрудниковDataTable ПроходыСотрудников { get; private set; }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ДоступВИнтернетDataTable ДоступВИнтернет { get; private set; }

        public override DataSet Clone()
        {
            var cln = (EmployeePeriodsInfoDs) base.Clone();
            cln.InitVars();
            return cln;
        }

        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        protected override void ReadXmlSerializable(XmlReader reader)
        {
            Reset();
            var ds = new DataSet();
            ds.ReadXml(reader);
            if (ds.Tables["Сотрудники"] != null) Tables.Add(new СотрудникиDataTable(ds.Tables["Сотрудники"]));
            if (ds.Tables["ПроходыСотрудников"] != null)
                Tables.Add(new ПроходыСотрудниковDataTable(ds.Tables["ПроходыСотрудников"]));
            if (ds.Tables["ДоступВИнтернет"] != null)
                Tables.Add(new ДоступВИнтернетDataTable(ds.Tables["ДоступВИнтернет"]));
            DataSetName = ds.DataSetName;
            Prefix = ds.Prefix;
            Namespace = ds.Namespace;
            Locale = ds.Locale;
            CaseSensitive = ds.CaseSensitive;
            EnforceConstraints = ds.EnforceConstraints;
            Merge(ds, false, MissingSchemaAction.Add);
            InitVars();
        }

        protected override XmlSchema GetSchemaSerializable()
        {
            var stream = new MemoryStream();
            WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }

        internal void InitVars()
        {
            Сотрудники = (СотрудникиDataTable) Tables["Сотрудники"];
            if (Сотрудники != null) Сотрудники.InitVars();
            ПроходыСотрудников = (ПроходыСотрудниковDataTable) Tables["ПроходыСотрудников"];
            if (ПроходыСотрудников != null) ПроходыСотрудников.InitVars();
            ДоступВИнтернет = (ДоступВИнтернетDataTable) Tables["ДоступВИнтернет"];
            if (ДоступВИнтернет != null) ДоступВИнтернет.InitVars();
        }

        private void InitClass()
        {
            DataSetName = "EmployeePeriodsInfoDs";
            Prefix = "";
            Namespace = "http://tempuri.org/EmployeePeriodsInfoDs.xsd";
            Locale = new CultureInfo("en-US");
            CaseSensitive = false;
            EnforceConstraints = true;
            Сотрудники = new СотрудникиDataTable();
            Tables.Add(Сотрудники);
            ПроходыСотрудников = new ПроходыСотрудниковDataTable();
            Tables.Add(ПроходыСотрудников);
            ДоступВИнтернет = new ДоступВИнтернетDataTable();
            Tables.Add(ДоступВИнтернет);
        }

        private bool ShouldSerializeСотрудники()
        {
            return false;
        }

        private bool ShouldSerializeПроходыСотрудников()
        {
            return false;
        }

        private bool ShouldSerializeДоступВИнтернет()
        {
            return false;
        }

        private void SchemaChanged(object sender, CollectionChangeEventArgs e)
        {
            if (e.Action == CollectionChangeAction.Remove) InitVars();
        }

        [DebuggerStepThrough]
        public class СотрудникиDataTable : DataTable, IEnumerable
        {
            internal СотрудникиDataTable() :
                base("Сотрудники")
            {
                InitClass();
            }

            internal СотрудникиDataTable(DataTable table) :
                base(table.TableName)
            {
                if (table.CaseSensitive != table.DataSet.CaseSensitive) CaseSensitive = table.CaseSensitive;
                if (table.Locale.ToString() != table.DataSet.Locale.ToString()) Locale = table.Locale;
                if (table.Namespace != table.DataSet.Namespace) Namespace = table.Namespace;
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)] public int Count => Rows.Count;

            internal DataColumn КодСотрудникаColumn { get; private set; }

            internal DataColumn СотрудникColumn { get; private set; }

            internal DataColumn EmployeeColumn { get; private set; }

            internal DataColumn КодЛицаColumn { get; private set; }

            public СотрудникиRow this[int index] => (СотрудникиRow) Rows[index];

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            public event СотрудникиRowChangeEventHandler СотрудникиRowChanged;

            public event СотрудникиRowChangeEventHandler СотрудникиRowChanging;

            public event СотрудникиRowChangeEventHandler СотрудникиRowDeleted;

            public event СотрудникиRowChangeEventHandler СотрудникиRowDeleting;

            public void AddСотрудникиRow(СотрудникиRow row)
            {
                Rows.Add(row);
            }

            public СотрудникиRow AddСотрудникиRow(int КодСотрудника, string Сотрудник, string Employee, string КодЛица)
            {
                var rowСотрудникиRow = (СотрудникиRow) NewRow();
                rowСотрудникиRow.ItemArray = new object[]
                {
                    КодСотрудника,
                    Сотрудник,
                    Employee,
                    КодЛица
                };
                Rows.Add(rowСотрудникиRow);
                return rowСотрудникиRow;
            }

            public override DataTable Clone()
            {
                var cln = (СотрудникиDataTable) base.Clone();
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new СотрудникиDataTable();
            }

            internal void InitVars()
            {
                КодСотрудникаColumn = Columns["КодСотрудника"];
                СотрудникColumn = Columns["Сотрудник"];
                EmployeeColumn = Columns["Employee"];
                КодЛицаColumn = Columns["КодЛица"];
            }

            private void InitClass()
            {
                КодСотрудникаColumn = new DataColumn("КодСотрудника", typeof(int), null, MappingType.Element);
                Columns.Add(КодСотрудникаColumn);
                СотрудникColumn = new DataColumn("Сотрудник", typeof(string), null, MappingType.Element);
                Columns.Add(СотрудникColumn);
                EmployeeColumn = new DataColumn("Employee", typeof(string), null, MappingType.Element);
                Columns.Add(EmployeeColumn);
                КодЛицаColumn = new DataColumn("КодЛица", typeof(string), null, MappingType.Element);
                Columns.Add(КодЛицаColumn);
                Constraints.Add(new UniqueConstraint("EmployeePeriodsInfoDsKey1", new[]
                {
                    КодСотрудникаColumn
                }, false));
                КодСотрудникаColumn.AllowDBNull = false;
                КодСотрудникаColumn.Unique = true;
                СотрудникColumn.AllowDBNull = false;
            }

            public СотрудникиRow NewСотрудникиRow()
            {
                return (СотрудникиRow) NewRow();
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new СотрудникиRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof(СотрудникиRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (СотрудникиRowChanged != null)
                    СотрудникиRowChanged(this, new СотрудникиRowChangeEvent((СотрудникиRow) e.Row, e.Action));
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (СотрудникиRowChanging != null)
                    СотрудникиRowChanging(this, new СотрудникиRowChangeEvent((СотрудникиRow) e.Row, e.Action));
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (СотрудникиRowDeleted != null)
                    СотрудникиRowDeleted(this, new СотрудникиRowChangeEvent((СотрудникиRow) e.Row, e.Action));
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (СотрудникиRowDeleting != null)
                    СотрудникиRowDeleting(this, new СотрудникиRowChangeEvent((СотрудникиRow) e.Row, e.Action));
            }

            public void RemoveСотрудникиRow(СотрудникиRow row)
            {
                Rows.Remove(row);
            }
        }

        [DebuggerStepThrough]
        public class СотрудникиRow : DataRow
        {
            private readonly СотрудникиDataTable tableСотрудники;

            internal СотрудникиRow(DataRowBuilder rb) :
                base(rb)
            {
                tableСотрудники = (СотрудникиDataTable) Table;
            }

            public int КодСотрудника
            {
                get { return (int) this[tableСотрудники.КодСотрудникаColumn]; }
                set { this[tableСотрудники.КодСотрудникаColumn] = value; }
            }

            public string Сотрудник
            {
                get { return (string) this[tableСотрудники.СотрудникColumn]; }
                set { this[tableСотрудники.СотрудникColumn] = value; }
            }

            public string Employee
            {
                get
                {
                    try
                    {
                        return (string) this[tableСотрудники.EmployeeColumn];
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableСотрудники.EmployeeColumn] = value; }
            }

            public string КодЛица
            {
                get { return (string) this[tableСотрудники.КодЛицаColumn]; }
                set { this[tableСотрудники.КодЛицаColumn] = value; }
            }

            public bool IsEmployeeNull()
            {
                return IsNull(tableСотрудники.EmployeeColumn);
            }

            public void SetEmployeeNull()
            {
                this[tableСотрудники.EmployeeColumn] = Convert.DBNull;
            }
        }

        [DebuggerStepThrough]
        public class СотрудникиRowChangeEvent : EventArgs
        {
            public СотрудникиRowChangeEvent(СотрудникиRow row, DataRowAction action)
            {
                Row = row;
                Action = action;
            }

            public СотрудникиRow Row { get; }

            public DataRowAction Action { get; }
        }

        [DebuggerStepThrough]
        public class ПроходыСотрудниковDataTable : DataTable, IEnumerable
        {
            internal ПроходыСотрудниковDataTable() :
                base("ПроходыСотрудников")
            {
                InitClass();
            }

            internal ПроходыСотрудниковDataTable(DataTable table) :
                base(table.TableName)
            {
                if (table.CaseSensitive != table.DataSet.CaseSensitive) CaseSensitive = table.CaseSensitive;
                if (table.Locale.ToString() != table.DataSet.Locale.ToString()) Locale = table.Locale;
                if (table.Namespace != table.DataSet.Namespace) Namespace = table.Namespace;
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)] public int Count => Rows.Count;

            internal DataColumn КодПроходаСотрудникаColumn { get; private set; }

            internal DataColumn КодСотрудникаColumn { get; private set; }

            internal DataColumn КогдаColumn { get; private set; }

            internal DataColumn КодРасположенияColumn { get; private set; }

            public ПроходыСотрудниковRow this[int index] => (ПроходыСотрудниковRow) Rows[index];

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            public event ПроходыСотрудниковRowChangeEventHandler ПроходыСотрудниковRowChanged;

            public event ПроходыСотрудниковRowChangeEventHandler ПроходыСотрудниковRowChanging;

            public event ПроходыСотрудниковRowChangeEventHandler ПроходыСотрудниковRowDeleted;

            public event ПроходыСотрудниковRowChangeEventHandler ПроходыСотрудниковRowDeleting;

            public void AddПроходыСотрудниковRow(ПроходыСотрудниковRow row)
            {
                Rows.Add(row);
            }

            public ПроходыСотрудниковRow AddПроходыСотрудниковRow(int КодСотрудника, DateTime Когда,
                int КодРасположения)
            {
                var rowПроходыСотрудниковRow = (ПроходыСотрудниковRow) NewRow();
                rowПроходыСотрудниковRow.ItemArray = new object[]
                {
                    null,
                    КодСотрудника,
                    Когда,
                    КодРасположения
                };
                Rows.Add(rowПроходыСотрудниковRow);
                return rowПроходыСотрудниковRow;
            }

            public override DataTable Clone()
            {
                var cln = (ПроходыСотрудниковDataTable) base.Clone();
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new ПроходыСотрудниковDataTable();
            }

            internal void InitVars()
            {
                КодПроходаСотрудникаColumn = Columns["КодПроходаСотрудника"];
                КодСотрудникаColumn = Columns["КодСотрудника"];
                КогдаColumn = Columns["Когда"];
                КодРасположенияColumn = Columns["КодРасположения"];
            }

            private void InitClass()
            {
                КодПроходаСотрудникаColumn =
                    new DataColumn("КодПроходаСотрудника", typeof(int), null, MappingType.Element);
                Columns.Add(КодПроходаСотрудникаColumn);
                КодСотрудникаColumn = new DataColumn("КодСотрудника", typeof(int), null, MappingType.Element);
                Columns.Add(КодСотрудникаColumn);
                КогдаColumn = new DataColumn("Когда", typeof(DateTime), null, MappingType.Element);
                Columns.Add(КогдаColumn);
                КодРасположенияColumn = new DataColumn("КодРасположения", typeof(int), null, MappingType.Element);
                Columns.Add(КодРасположенияColumn);
                Constraints.Add(new UniqueConstraint("EmployeePeriodsInfoDsKey2", new[]
                {
                    КодПроходаСотрудникаColumn
                }, false));
                КодПроходаСотрудникаColumn.AutoIncrement = true;
                КодПроходаСотрудникаColumn.AllowDBNull = false;
                КодПроходаСотрудникаColumn.ReadOnly = true;
                КодПроходаСотрудникаColumn.Unique = true;
                КодСотрудникаColumn.AllowDBNull = false;
                КогдаColumn.AllowDBNull = false;
            }

            public ПроходыСотрудниковRow NewПроходыСотрудниковRow()
            {
                return (ПроходыСотрудниковRow) NewRow();
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ПроходыСотрудниковRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof(ПроходыСотрудниковRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (ПроходыСотрудниковRowChanged != null)
                    ПроходыСотрудниковRowChanged(this,
                        new ПроходыСотрудниковRowChangeEvent((ПроходыСотрудниковRow) e.Row, e.Action));
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (ПроходыСотрудниковRowChanging != null)
                    ПроходыСотрудниковRowChanging(this,
                        new ПроходыСотрудниковRowChangeEvent((ПроходыСотрудниковRow) e.Row, e.Action));
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (ПроходыСотрудниковRowDeleted != null)
                    ПроходыСотрудниковRowDeleted(this,
                        new ПроходыСотрудниковRowChangeEvent((ПроходыСотрудниковRow) e.Row, e.Action));
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (ПроходыСотрудниковRowDeleting != null)
                    ПроходыСотрудниковRowDeleting(this,
                        new ПроходыСотрудниковRowChangeEvent((ПроходыСотрудниковRow) e.Row, e.Action));
            }

            public void RemoveПроходыСотрудниковRow(ПроходыСотрудниковRow row)
            {
                Rows.Remove(row);
            }
        }

        [DebuggerStepThrough]
        public class ПроходыСотрудниковRow : DataRow
        {
            private readonly ПроходыСотрудниковDataTable tableПроходыСотрудников;

            internal ПроходыСотрудниковRow(DataRowBuilder rb) :
                base(rb)
            {
                tableПроходыСотрудников = (ПроходыСотрудниковDataTable) Table;
            }

            public int КодПроходаСотрудника
            {
                get { return (int) this[tableПроходыСотрудников.КодПроходаСотрудникаColumn]; }
                set { this[tableПроходыСотрудников.КодПроходаСотрудникаColumn] = value; }
            }

            public int КодСотрудника
            {
                get { return (int) this[tableПроходыСотрудников.КодСотрудникаColumn]; }
                set { this[tableПроходыСотрудников.КодСотрудникаColumn] = value; }
            }

            public DateTime Когда
            {
                get { return (DateTime) this[tableПроходыСотрудников.КогдаColumn]; }
                set { this[tableПроходыСотрудников.КогдаColumn] = value; }
            }

            public int КодРасположения
            {
                get
                {
                    try
                    {
                        return (int) this[tableПроходыСотрудников.КодРасположенияColumn];
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableПроходыСотрудников.КодРасположенияColumn] = value; }
            }

            public bool IsКодРасположенияNull()
            {
                return IsNull(tableПроходыСотрудников.КодРасположенияColumn);
            }

            public void SetКодРасположенияNull()
            {
                this[tableПроходыСотрудников.КодРасположенияColumn] = Convert.DBNull;
            }
        }

        [DebuggerStepThrough]
        public class ПроходыСотрудниковRowChangeEvent : EventArgs
        {
            public ПроходыСотрудниковRowChangeEvent(ПроходыСотрудниковRow row, DataRowAction action)
            {
                Row = row;
                Action = action;
            }

            public ПроходыСотрудниковRow Row { get; }

            public DataRowAction Action { get; }
        }

        [DebuggerStepThrough]
        public class ДоступВИнтернетDataTable : DataTable, IEnumerable
        {
            internal ДоступВИнтернетDataTable() :
                base("ДоступВИнтернет")
            {
                InitClass();
            }

            internal ДоступВИнтернетDataTable(DataTable table) :
                base(table.TableName)
            {
                if (table.CaseSensitive != table.DataSet.CaseSensitive) CaseSensitive = table.CaseSensitive;
                if (table.Locale.ToString() != table.DataSet.Locale.ToString()) Locale = table.Locale;
                if (table.Namespace != table.DataSet.Namespace) Namespace = table.Namespace;
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)] public int Count => Rows.Count;

            internal DataColumn КодСотрудникаColumn { get; private set; }

            internal DataColumn ОтColumn { get; private set; }

            internal DataColumn ПоColumn { get; private set; }

            public ДоступВИнтернетRow this[int index] => (ДоступВИнтернетRow) Rows[index];

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            public event ДоступВИнтернетRowChangeEventHandler ДоступВИнтернетRowChanged;

            public event ДоступВИнтернетRowChangeEventHandler ДоступВИнтернетRowChanging;

            public event ДоступВИнтернетRowChangeEventHandler ДоступВИнтернетRowDeleted;

            public event ДоступВИнтернетRowChangeEventHandler ДоступВИнтернетRowDeleting;

            public void AddДоступВИнтернетRow(ДоступВИнтернетRow row)
            {
                Rows.Add(row);
            }

            public ДоступВИнтернетRow AddДоступВИнтернетRow(int КодСотрудника, DateTime От, DateTime По)
            {
                var rowДоступВИнтернетRow = (ДоступВИнтернетRow) NewRow();
                rowДоступВИнтернетRow.ItemArray = new object[]
                {
                    КодСотрудника,
                    От,
                    По
                };
                Rows.Add(rowДоступВИнтернетRow);
                return rowДоступВИнтернетRow;
            }

            public override DataTable Clone()
            {
                var cln = (ДоступВИнтернетDataTable) base.Clone();
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new ДоступВИнтернетDataTable();
            }

            internal void InitVars()
            {
                КодСотрудникаColumn = Columns["КодСотрудника"];
                ОтColumn = Columns["От"];
                ПоColumn = Columns["По"];
            }

            private void InitClass()
            {
                КодСотрудникаColumn = new DataColumn("КодСотрудника", typeof(int), null, MappingType.Element);
                Columns.Add(КодСотрудникаColumn);
                ОтColumn = new DataColumn("От", typeof(DateTime), null, MappingType.Element);
                Columns.Add(ОтColumn);
                ПоColumn = new DataColumn("По", typeof(DateTime), null, MappingType.Element);
                Columns.Add(ПоColumn);
                КодСотрудникаColumn.AllowDBNull = false;
                ОтColumn.AllowDBNull = false;
            }

            public ДоступВИнтернетRow NewДоступВИнтернетRow()
            {
                return (ДоступВИнтернетRow) NewRow();
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ДоступВИнтернетRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof(ДоступВИнтернетRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (ДоступВИнтернетRowChanged != null)
                    ДоступВИнтернетRowChanged(this,
                        new ДоступВИнтернетRowChangeEvent((ДоступВИнтернетRow) e.Row, e.Action));
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (ДоступВИнтернетRowChanging != null)
                    ДоступВИнтернетRowChanging(this,
                        new ДоступВИнтернетRowChangeEvent((ДоступВИнтернетRow) e.Row, e.Action));
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (ДоступВИнтернетRowDeleted != null)
                    ДоступВИнтернетRowDeleted(this,
                        new ДоступВИнтернетRowChangeEvent((ДоступВИнтернетRow) e.Row, e.Action));
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (ДоступВИнтернетRowDeleting != null)
                    ДоступВИнтернетRowDeleting(this,
                        new ДоступВИнтернетRowChangeEvent((ДоступВИнтернетRow) e.Row, e.Action));
            }

            public void RemoveДоступВИнтернетRow(ДоступВИнтернетRow row)
            {
                Rows.Remove(row);
            }
        }

        [DebuggerStepThrough]
        public class ДоступВИнтернетRow : DataRow
        {
            private readonly ДоступВИнтернетDataTable tableДоступВИнтернет;

            internal ДоступВИнтернетRow(DataRowBuilder rb) :
                base(rb)
            {
                tableДоступВИнтернет = (ДоступВИнтернетDataTable) Table;
            }

            public int КодСотрудника
            {
                get { return (int) this[tableДоступВИнтернет.КодСотрудникаColumn]; }
                set { this[tableДоступВИнтернет.КодСотрудникаColumn] = value; }
            }

            public DateTime От
            {
                get { return (DateTime) this[tableДоступВИнтернет.ОтColumn]; }
                set { this[tableДоступВИнтернет.ОтColumn] = value; }
            }

            public DateTime По
            {
                get
                {
                    try
                    {
                        return (DateTime) this[tableДоступВИнтернет.ПоColumn];
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableДоступВИнтернет.ПоColumn] = value; }
            }

            public bool IsПоNull()
            {
                return IsNull(tableДоступВИнтернет.ПоColumn);
            }

            public void SetПоNull()
            {
                this[tableДоступВИнтернет.ПоColumn] = Convert.DBNull;
            }
        }

        [DebuggerStepThrough]
        public class ДоступВИнтернетRowChangeEvent : EventArgs
        {
            public ДоступВИнтернетRowChangeEvent(ДоступВИнтернетRow row, DataRowAction action)
            {
                Row = row;
                Action = action;
            }

            public ДоступВИнтернетRow Row { get; }

            public DataRowAction Action { get; }
        }
    }
}