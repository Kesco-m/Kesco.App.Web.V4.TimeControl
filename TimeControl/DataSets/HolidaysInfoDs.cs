//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2407
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;

namespace Kesco.App.Web.TimeControl.DataSets
{
    [Serializable]
    [DesignerCategory("code")]
    [DebuggerStepThrough]
    [ToolboxItem(true)]
    public class HolidaysInfoDs : DataSet
    {
        public delegate void ПраздникиRowChangeEventHandler(object sender, ПраздникиRowChangeEvent e);

        public HolidaysInfoDs()
        {
            InitClass();
            CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        protected HolidaysInfoDs(SerializationInfo info, StreamingContext context)
        {
            var strSchema = (string) info.GetValue("XmlSchema", typeof(string));
            if (strSchema != null)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if (ds.Tables["Праздники"] != null) Tables.Add(new ПраздникиDataTable(ds.Tables["Праздники"]));
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                InitClass();
            }

            GetSerializationData(info, context);
            var schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ПраздникиDataTable Праздники { get; private set; }

        public override DataSet Clone()
        {
            var cln = (HolidaysInfoDs) base.Clone();
            cln.InitVars();
            return cln;
        }

        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        protected override void ReadXmlSerializable(XmlReader reader)
        {
            Reset();
            var ds = new DataSet();
            ds.ReadXml(reader);
            if (ds.Tables["Праздники"] != null) Tables.Add(new ПраздникиDataTable(ds.Tables["Праздники"]));
            DataSetName = ds.DataSetName;
            Prefix = ds.Prefix;
            Namespace = ds.Namespace;
            Locale = ds.Locale;
            CaseSensitive = ds.CaseSensitive;
            EnforceConstraints = ds.EnforceConstraints;
            Merge(ds, false, MissingSchemaAction.Add);
            InitVars();
        }

        protected override XmlSchema GetSchemaSerializable()
        {
            var stream = new MemoryStream();
            WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }

        internal void InitVars()
        {
            Праздники = (ПраздникиDataTable) Tables["Праздники"];
            if (Праздники != null) Праздники.InitVars();
        }

        private void InitClass()
        {
            DataSetName = "HolidaysInfoDs";
            Prefix = "";
            Namespace = "http://tempuri.org/HolidaysInfoDs.xsd";
            Locale = new CultureInfo("en-US");
            CaseSensitive = false;
            EnforceConstraints = true;
            Праздники = new ПраздникиDataTable();
            Tables.Add(Праздники);
        }

        private bool ShouldSerializeПраздники()
        {
            return false;
        }

        private void SchemaChanged(object sender, CollectionChangeEventArgs e)
        {
            if (e.Action == CollectionChangeAction.Remove) InitVars();
        }

        [DebuggerStepThrough]
        public class ПраздникиDataTable : DataTable, IEnumerable
        {
            internal ПраздникиDataTable() :
                base("Праздники")
            {
                InitClass();
            }

            internal ПраздникиDataTable(DataTable table) :
                base(table.TableName)
            {
                if (table.CaseSensitive != table.DataSet.CaseSensitive) CaseSensitive = table.CaseSensitive;
                if (table.Locale.ToString() != table.DataSet.Locale.ToString()) Locale = table.Locale;
                if (table.Namespace != table.DataSet.Namespace) Namespace = table.Namespace;
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)] public int Count => Rows.Count;

            internal DataColumn ДатаColumn { get; private set; }

            internal DataColumn НазваниеColumn { get; private set; }

            internal DataColumn РабочийВыходнойColumn { get; private set; }

            internal DataColumn ПраздникColumn { get; private set; }

            public ПраздникиRow this[int index] => (ПраздникиRow) Rows[index];

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            public event ПраздникиRowChangeEventHandler ПраздникиRowChanged;

            public event ПраздникиRowChangeEventHandler ПраздникиRowChanging;

            public event ПраздникиRowChangeEventHandler ПраздникиRowDeleted;

            public event ПраздникиRowChangeEventHandler ПраздникиRowDeleting;

            public void AddПраздникиRow(ПраздникиRow row)
            {
                Rows.Add(row);
            }

            public ПраздникиRow AddПраздникиRow(DateTime Дата, string Название, byte РабочийВыходной, byte Праздник)
            {
                var rowПраздникиRow = (ПраздникиRow) NewRow();
                rowПраздникиRow.ItemArray = new object[]
                {
                    Дата,
                    Название,
                    РабочийВыходной,
                    Праздник
                };
                Rows.Add(rowПраздникиRow);
                return rowПраздникиRow;
            }

            public ПраздникиRow FindByДата(DateTime Дата)
            {
                return (ПраздникиRow) Rows.Find(new object[]
                {
                    Дата
                });
            }

            public override DataTable Clone()
            {
                var cln = (ПраздникиDataTable) base.Clone();
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new ПраздникиDataTable();
            }

            internal void InitVars()
            {
                ДатаColumn = Columns["Дата"];
                НазваниеColumn = Columns["Название"];
                РабочийВыходнойColumn = Columns["РабочийВыходной"];
                ПраздникColumn = Columns["Праздник"];
            }

            private void InitClass()
            {
                ДатаColumn = new DataColumn("Дата", typeof(DateTime), null, MappingType.Element);
                Columns.Add(ДатаColumn);
                НазваниеColumn = new DataColumn("Название", typeof(string), null, MappingType.Element);
                Columns.Add(НазваниеColumn);
                РабочийВыходнойColumn = new DataColumn("РабочийВыходной", typeof(byte), null, MappingType.Element);
                Columns.Add(РабочийВыходнойColumn);
                ПраздникColumn = new DataColumn("Праздник", typeof(byte), null, MappingType.Element);
                Columns.Add(ПраздникColumn);
                Constraints.Add(new UniqueConstraint("HolidaysInfoDsKey1", new[]
                {
                    ДатаColumn
                }, true));
                ДатаColumn.AllowDBNull = false;
                ДатаColumn.Unique = true;
                НазваниеColumn.AllowDBNull = false;
                РабочийВыходнойColumn.AllowDBNull = false;
                ПраздникColumn.AllowDBNull = false;
            }

            public ПраздникиRow NewПраздникиRow()
            {
                return (ПраздникиRow) NewRow();
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ПраздникиRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof(ПраздникиRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (ПраздникиRowChanged != null)
                    ПраздникиRowChanged(this, new ПраздникиRowChangeEvent((ПраздникиRow) e.Row, e.Action));
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (ПраздникиRowChanging != null)
                    ПраздникиRowChanging(this, new ПраздникиRowChangeEvent((ПраздникиRow) e.Row, e.Action));
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (ПраздникиRowDeleted != null)
                    ПраздникиRowDeleted(this, new ПраздникиRowChangeEvent((ПраздникиRow) e.Row, e.Action));
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (ПраздникиRowDeleting != null)
                    ПраздникиRowDeleting(this, new ПраздникиRowChangeEvent((ПраздникиRow) e.Row, e.Action));
            }

            public void RemoveПраздникиRow(ПраздникиRow row)
            {
                Rows.Remove(row);
            }
        }

        [DebuggerStepThrough]
        public class ПраздникиRow : DataRow
        {
            private readonly ПраздникиDataTable tableПраздники;

            internal ПраздникиRow(DataRowBuilder rb) :
                base(rb)
            {
                tableПраздники = (ПраздникиDataTable) Table;
            }

            public DateTime Дата
            {
                get { return (DateTime) this[tableПраздники.ДатаColumn]; }
                set { this[tableПраздники.ДатаColumn] = value; }
            }

            public string Название
            {
                get { return (string) this[tableПраздники.НазваниеColumn]; }
                set { this[tableПраздники.НазваниеColumn] = value; }
            }

            public byte РабочийВыходной
            {
                get { return (byte) this[tableПраздники.РабочийВыходнойColumn]; }
                set { this[tableПраздники.РабочийВыходнойColumn] = value; }
            }

            public byte Праздник
            {
                get { return (byte) this[tableПраздники.ПраздникColumn]; }
                set { this[tableПраздники.ПраздникColumn] = value; }
            }
        }

        [DebuggerStepThrough]
        public class ПраздникиRowChangeEvent : EventArgs
        {
            public ПраздникиRowChangeEvent(ПраздникиRow row, DataRowAction action)
            {
                Row = row;
                Action = action;
            }

            public ПраздникиRow Row { get; }

            public DataRowAction Action { get; }
        }
    }
}