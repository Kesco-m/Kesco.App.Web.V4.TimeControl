//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2407
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Kesco.App.Web.TimeControl.DataSets
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class HolidaysInfoDs : DataSet {
        
        private ПраздникиDataTable tableПраздники;
        
        public HolidaysInfoDs() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected HolidaysInfoDs(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Праздники"] != null)) {
                    this.Tables.Add(new ПраздникиDataTable(ds.Tables["Праздники"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПраздникиDataTable Праздники {
            get {
                return this.tableПраздники;
            }
        }
        
        public override DataSet Clone() {
            HolidaysInfoDs cln = ((HolidaysInfoDs)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Праздники"] != null)) {
                this.Tables.Add(new ПраздникиDataTable(ds.Tables["Праздники"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableПраздники = ((ПраздникиDataTable)(this.Tables["Праздники"]));
            if ((this.tableПраздники != null)) {
                this.tableПраздники.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "HolidaysInfoDs";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/HolidaysInfoDs.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableПраздники = new ПраздникиDataTable();
            this.Tables.Add(this.tableПраздники);
        }
        
        private bool ShouldSerializeПраздники() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ПраздникиRowChangeEventHandler(object sender, ПраздникиRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ПраздникиDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnДата;
            
            private DataColumn columnНазвание;
            
            private DataColumn columnРабочийВыходной;
            
            private DataColumn columnПраздник;
            
            internal ПраздникиDataTable() : 
                    base("Праздники") {
                this.InitClass();
            }
            
            internal ПраздникиDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ДатаColumn {
                get {
                    return this.columnДата;
                }
            }
            
            internal DataColumn НазваниеColumn {
                get {
                    return this.columnНазвание;
                }
            }
            
            internal DataColumn РабочийВыходнойColumn {
                get {
                    return this.columnРабочийВыходной;
                }
            }
            
            internal DataColumn ПраздникColumn {
                get {
                    return this.columnПраздник;
                }
            }
            
            public ПраздникиRow this[int index] {
                get {
                    return ((ПраздникиRow)(this.Rows[index]));
                }
            }
            
            public event ПраздникиRowChangeEventHandler ПраздникиRowChanged;
            
            public event ПраздникиRowChangeEventHandler ПраздникиRowChanging;
            
            public event ПраздникиRowChangeEventHandler ПраздникиRowDeleted;
            
            public event ПраздникиRowChangeEventHandler ПраздникиRowDeleting;
            
            public void AddПраздникиRow(ПраздникиRow row) {
                this.Rows.Add(row);
            }
            
            public ПраздникиRow AddПраздникиRow(System.DateTime Дата, string Название, System.Byte РабочийВыходной, System.Byte Праздник) {
                ПраздникиRow rowПраздникиRow = ((ПраздникиRow)(this.NewRow()));
                rowПраздникиRow.ItemArray = new object[] {
                        Дата,
                        Название,
                        РабочийВыходной,
                        Праздник};
                this.Rows.Add(rowПраздникиRow);
                return rowПраздникиRow;
            }
            
            public ПраздникиRow FindByДата(System.DateTime Дата) {
                return ((ПраздникиRow)(this.Rows.Find(new object[] {
                            Дата})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ПраздникиDataTable cln = ((ПраздникиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ПраздникиDataTable();
            }
            
            internal void InitVars() {
                this.columnДата = this.Columns["Дата"];
                this.columnНазвание = this.Columns["Название"];
                this.columnРабочийВыходной = this.Columns["РабочийВыходной"];
                this.columnПраздник = this.Columns["Праздник"];
            }
            
            private void InitClass() {
                this.columnДата = new DataColumn("Дата", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnДата);
                this.columnНазвание = new DataColumn("Название", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnНазвание);
                this.columnРабочийВыходной = new DataColumn("РабочийВыходной", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnРабочийВыходной);
                this.columnПраздник = new DataColumn("Праздник", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnПраздник);
                this.Constraints.Add(new UniqueConstraint("HolidaysInfoDsKey1", new DataColumn[] {
                                this.columnДата}, true));
                this.columnДата.AllowDBNull = false;
                this.columnДата.Unique = true;
                this.columnНазвание.AllowDBNull = false;
                this.columnРабочийВыходной.AllowDBNull = false;
                this.columnПраздник.AllowDBNull = false;
            }
            
            public ПраздникиRow NewПраздникиRow() {
                return ((ПраздникиRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ПраздникиRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ПраздникиRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПраздникиRowChanged != null)) {
                    this.ПраздникиRowChanged(this, new ПраздникиRowChangeEvent(((ПраздникиRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПраздникиRowChanging != null)) {
                    this.ПраздникиRowChanging(this, new ПраздникиRowChangeEvent(((ПраздникиRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПраздникиRowDeleted != null)) {
                    this.ПраздникиRowDeleted(this, new ПраздникиRowChangeEvent(((ПраздникиRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПраздникиRowDeleting != null)) {
                    this.ПраздникиRowDeleting(this, new ПраздникиRowChangeEvent(((ПраздникиRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveПраздникиRow(ПраздникиRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ПраздникиRow : DataRow {
            
            private ПраздникиDataTable tableПраздники;
            
            internal ПраздникиRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableПраздники = ((ПраздникиDataTable)(this.Table));
            }
            
            public System.DateTime Дата {
                get {
                    return ((System.DateTime)(this[this.tableПраздники.ДатаColumn]));
                }
                set {
                    this[this.tableПраздники.ДатаColumn] = value;
                }
            }
            
            public string Название {
                get {
                    return ((string)(this[this.tableПраздники.НазваниеColumn]));
                }
                set {
                    this[this.tableПраздники.НазваниеColumn] = value;
                }
            }
            
            public System.Byte РабочийВыходной {
                get {
                    return ((System.Byte)(this[this.tableПраздники.РабочийВыходнойColumn]));
                }
                set {
                    this[this.tableПраздники.РабочийВыходнойColumn] = value;
                }
            }
            
            public System.Byte Праздник {
                get {
                    return ((System.Byte)(this[this.tableПраздники.ПраздникColumn]));
                }
                set {
                    this[this.tableПраздники.ПраздникColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ПраздникиRowChangeEvent : EventArgs {
            
            private ПраздникиRow eventRow;
            
            private DataRowAction eventAction;
            
            public ПраздникиRowChangeEvent(ПраздникиRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ПраздникиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
